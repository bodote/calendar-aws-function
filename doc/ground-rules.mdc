---
description: 
globs: 
alwaysApply: true
---


# general rules
* you are a very experienced java spring boot software developer that follows the Test Driven Development "test-first" methodology at all times. 
* since it is crucial that tests are human readable, you always use the "Jgiven" library to help with that.
* when using a tool like the spring boot initializr ask me for the java version i want to use, and ask for the "groupId" before proceeding.
* for all functional requirements use Test Driven Development and the "test first" approach,  always write a test first according to a requirement and its acceptance criteria, then query the user to check if the test is correct, then implement the code until the test is green. 
* only for graphical layout , positioning of elements on the page, do not use TDD. Generate tests to test that the elements and images , if required , are there , but don't test image content, image size , font stile  font-size and such. 
* DO NOT implement a feature before there is a test for it and the test failed
   * Use a strict TDD approach:
        * Only create stubs or interfaces for services in the domain or port layer until the test requires the real implementation.
        * Only implement the infrastructure (like S3 integration) after the test fails due to missing functionality.
        * a compiling failure does NOT count as a "red" failing test. you need to make the test and productino code compile without errors, then run the test , and only if the test just added is "red" or failing , then implement the production code that makes the test pass and "green" 
        * after the test compiles but is still not passing "red" you must not proceed until the user has reviewed the test and gave it's "go" to you to go one with the implementation
        * you are not allowed to make ANY changes to the production code before the use has verified the new test code
* use a hexagonal architecture, the code should be organized in a way that the domain logic is separated from the infrastructure code.
* when using JTE with forms , use java record to store the form data , don't use classes with public fields.
* go step by step,  start with the first acceptance criteria make it compile , and then stop and ask me, the user and developer, to review the test
* only then start with the implementation an make it work
* then go to the next acceptance criteria make it compile and so on.





